{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs HOLA HOLA For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Principal"},{"location":"#welcome-to-mkdocs","text":"HOLA HOLA For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"","title":"Acerca de"},{"location":"practicas/","text":"Instalaci\u00f3n de WordPress usando contenedores Docker y Docker Compose Para realizar esta pr\u00e1ctica hay 3 archivos fundamentales. Por un lado, el script para instalar docker y docker-compose . Y por otro lado, el archivo docker-compose.yml y el archivo .env con las variables comunes. Script de instalaci\u00f3n de Docker Lo primero que hay que hacer es definir una variable del nombre de usuario para llamarlo ubuntu: USERNAME=ubuntu El siguiente paso, como siempre, es actualizar la lista de paquetes del repositorio: apt update Se descarga el script de instalaci\u00f3n de docker: curl -fsSL https://get.docker.com -o get-docker.sh Tras ello, se ejecuta dicho script: sh ./get-docker.sh Ahora es el turno de a\u00f1adir el usuario de la m\u00e1quina virtual de Amazon al grupo docker: usermod -aG docker $USERNAME Lo siguiente es iniciar el servicio de Docker: systemctl start docker El pen\u00faltimo paso es instalar el paquete de docker-compose : apt install docker-compose -y Para finalizar esta primera parte, y ya fuera del script de instalaci\u00f3n, hay que ejecutar el comando newgrp docker para no tener que reiniciar la m\u00e1quina y que los cambios se efect\u00faen. Pero es important\u00edsimo hacerlo fuera del script. Archivo docker-compose.yml En este archivo es donde se configuran todos los servicios para levantar la aplicaci\u00f3n de WordPress, que se componen de distintas im\u00e1genes: WordPress : Voy a poner un copy-paste y se van explicando todos los apartados de este primer servicio, y luego el resto ya las cosas que le falten a este primero: version: '3.3' services: wordpress: image: wordpress:php8.0 environment: - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST} - WORDPRESS_DB_USER=${WORDPRESS_DB_USER} - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD} - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME} restart: always volumes: - wordpress_data:/var/www/html depends_on: - mysql networks: - frontend_network - backend_network La version '3.3' es la versi\u00f3n del archivo .yml del Docker-compose. El apartado services es donde se engloban todas las instancias (wordpress, mysql, phpmyadmin, etc). image es la imagen de docker-hub que se escoge para la instalaci\u00f3n. environment son las variables de configuraci\u00f3n de la imagen necesarias para que arranque. Si atendemos al valor de dichas variables, vemos que no hay un valor, sino una referencia a otra variable ( ${WORDPRESS_DB_HOST} ). Esto se configura en un archivo .env , que en esta pr\u00e1ctica es el siguiente: WORDPRESS_DB_HOST=mysql WORDPRESS_DB_USER=wordpress_user WORDPRESS_DB_PASSWORD=wordpress_password WORDPRESS_DB_NAME=wordpress_db MYSQL_ROOT_PASSWORD=password Por lo tanto, desde las variables del archivo .yml se llama a las variables del .env. restart es para que si la imagen se cae, se levante sola y no se pierdan los datos. depends-on se utiliza para que esa imagen no se arranque si no se arranca otra del docker-compose.yml. Finalmente, networks sirve para identificar a que niveles quieres que perteneza la imagen en s\u00ed. mysql : mysql: image: mysql:8.0 environment: - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${WORDPRESS_DB_NAME} - MYSQL_USER=${WORDPRESS_DB_USER} - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD} restart: always volumes: - mysql_data:/var/lib/mysql networks: - backend_network phpmyadmin : phpmyadmin: image: phpmyadmin:5 restart: always ports: - 8080:80 environment: - PMA_HOST=mysql depends_on: - mysql networks: - frontend_network - backend_network En este caso se ve el apartado ports . Es para que las peticiones del puerto 80 de la m\u00e1quina se pase al 8080 del phpmyadmin. https-portal : https-portal: image: steveltn/https-portal:1 ports: - 80:80 - 443:443 environment: #DOMAINS: 'localhost -> http://wordpress:80 #local' DOMAINS: 'dem-dockerwp.ddns.net -> http://wordpress:80 #production' volumes: - ssl_certs_data:/var/lib/https-portal depends_on: - wordpress restart: always networks: - frontend_network volumes: wordpress_data: mysql_data: ssl_certs_data: networks: frontend_network: backend_network: Esta imagen sirve para habilitar un certificado HTTPS en el dominio seleccionado.","title":"Pr\u00e1cticas"},{"location":"practicas/#instalacion-de-wordpress-usando-contenedores-docker-y-docker-compose","text":"Para realizar esta pr\u00e1ctica hay 3 archivos fundamentales. Por un lado, el script para instalar docker y docker-compose . Y por otro lado, el archivo docker-compose.yml y el archivo .env con las variables comunes.","title":"Instalaci\u00f3n de WordPress usando contenedores Docker y Docker Compose"},{"location":"practicas/#script-de-instalacion-de-docker","text":"Lo primero que hay que hacer es definir una variable del nombre de usuario para llamarlo ubuntu: USERNAME=ubuntu El siguiente paso, como siempre, es actualizar la lista de paquetes del repositorio: apt update Se descarga el script de instalaci\u00f3n de docker: curl -fsSL https://get.docker.com -o get-docker.sh Tras ello, se ejecuta dicho script: sh ./get-docker.sh Ahora es el turno de a\u00f1adir el usuario de la m\u00e1quina virtual de Amazon al grupo docker: usermod -aG docker $USERNAME Lo siguiente es iniciar el servicio de Docker: systemctl start docker El pen\u00faltimo paso es instalar el paquete de docker-compose : apt install docker-compose -y Para finalizar esta primera parte, y ya fuera del script de instalaci\u00f3n, hay que ejecutar el comando newgrp docker para no tener que reiniciar la m\u00e1quina y que los cambios se efect\u00faen. Pero es important\u00edsimo hacerlo fuera del script.","title":"Script de instalaci\u00f3n de Docker"},{"location":"practicas/#archivo-docker-composeyml","text":"En este archivo es donde se configuran todos los servicios para levantar la aplicaci\u00f3n de WordPress, que se componen de distintas im\u00e1genes: WordPress : Voy a poner un copy-paste y se van explicando todos los apartados de este primer servicio, y luego el resto ya las cosas que le falten a este primero: version: '3.3' services: wordpress: image: wordpress:php8.0 environment: - WORDPRESS_DB_HOST=${WORDPRESS_DB_HOST} - WORDPRESS_DB_USER=${WORDPRESS_DB_USER} - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD} - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME} restart: always volumes: - wordpress_data:/var/www/html depends_on: - mysql networks: - frontend_network - backend_network La version '3.3' es la versi\u00f3n del archivo .yml del Docker-compose. El apartado services es donde se engloban todas las instancias (wordpress, mysql, phpmyadmin, etc). image es la imagen de docker-hub que se escoge para la instalaci\u00f3n. environment son las variables de configuraci\u00f3n de la imagen necesarias para que arranque. Si atendemos al valor de dichas variables, vemos que no hay un valor, sino una referencia a otra variable ( ${WORDPRESS_DB_HOST} ). Esto se configura en un archivo .env , que en esta pr\u00e1ctica es el siguiente: WORDPRESS_DB_HOST=mysql WORDPRESS_DB_USER=wordpress_user WORDPRESS_DB_PASSWORD=wordpress_password WORDPRESS_DB_NAME=wordpress_db MYSQL_ROOT_PASSWORD=password Por lo tanto, desde las variables del archivo .yml se llama a las variables del .env. restart es para que si la imagen se cae, se levante sola y no se pierdan los datos. depends-on se utiliza para que esa imagen no se arranque si no se arranca otra del docker-compose.yml. Finalmente, networks sirve para identificar a que niveles quieres que perteneza la imagen en s\u00ed. mysql : mysql: image: mysql:8.0 environment: - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_DATABASE=${WORDPRESS_DB_NAME} - MYSQL_USER=${WORDPRESS_DB_USER} - MYSQL_PASSWORD=${WORDPRESS_DB_PASSWORD} restart: always volumes: - mysql_data:/var/lib/mysql networks: - backend_network phpmyadmin : phpmyadmin: image: phpmyadmin:5 restart: always ports: - 8080:80 environment: - PMA_HOST=mysql depends_on: - mysql networks: - frontend_network - backend_network En este caso se ve el apartado ports . Es para que las peticiones del puerto 80 de la m\u00e1quina se pase al 8080 del phpmyadmin. https-portal : https-portal: image: steveltn/https-portal:1 ports: - 80:80 - 443:443 environment: #DOMAINS: 'localhost -> http://wordpress:80 #local' DOMAINS: 'dem-dockerwp.ddns.net -> http://wordpress:80 #production' volumes: - ssl_certs_data:/var/lib/https-portal depends_on: - wordpress restart: always networks: - frontend_network volumes: wordpress_data: mysql_data: ssl_certs_data: networks: frontend_network: backend_network: Esta imagen sirve para habilitar un certificado HTTPS en el dominio seleccionado.","title":"Archivo docker-compose.yml"}]}